// Generated by gencpp from file sas_robot_driver_franka/GripperState.msg
// DO NOT EDIT!


#ifndef SAS_ROBOT_DRIVER_FRANKA_MESSAGE_GRIPPERSTATE_H
#define SAS_ROBOT_DRIVER_FRANKA_MESSAGE_GRIPPERSTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace sas_robot_driver_franka
{
template <class ContainerAllocator>
struct GripperState_
{
  typedef GripperState_<ContainerAllocator> Type;

  GripperState_()
    : width(0.0)
    , max_width(0.0)
    , is_grasped(false)
    , temperature(0)
    , duration_ms(0)  {
    }
  GripperState_(const ContainerAllocator& _alloc)
    : width(0.0)
    , max_width(0.0)
    , is_grasped(false)
    , temperature(0)
    , duration_ms(0)  {
  (void)_alloc;
    }



   typedef float _width_type;
  _width_type width;

   typedef float _max_width_type;
  _max_width_type max_width;

   typedef uint8_t _is_grasped_type;
  _is_grasped_type is_grasped;

   typedef uint16_t _temperature_type;
  _temperature_type temperature;

   typedef uint64_t _duration_ms_type;
  _duration_ms_type duration_ms;





  typedef boost::shared_ptr< ::sas_robot_driver_franka::GripperState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sas_robot_driver_franka::GripperState_<ContainerAllocator> const> ConstPtr;

}; // struct GripperState_

typedef ::sas_robot_driver_franka::GripperState_<std::allocator<void> > GripperState;

typedef boost::shared_ptr< ::sas_robot_driver_franka::GripperState > GripperStatePtr;
typedef boost::shared_ptr< ::sas_robot_driver_franka::GripperState const> GripperStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sas_robot_driver_franka::GripperState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sas_robot_driver_franka::GripperState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::sas_robot_driver_franka::GripperState_<ContainerAllocator1> & lhs, const ::sas_robot_driver_franka::GripperState_<ContainerAllocator2> & rhs)
{
  return lhs.width == rhs.width &&
    lhs.max_width == rhs.max_width &&
    lhs.is_grasped == rhs.is_grasped &&
    lhs.temperature == rhs.temperature &&
    lhs.duration_ms == rhs.duration_ms;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::sas_robot_driver_franka::GripperState_<ContainerAllocator1> & lhs, const ::sas_robot_driver_franka::GripperState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace sas_robot_driver_franka

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::sas_robot_driver_franka::GripperState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sas_robot_driver_franka::GripperState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sas_robot_driver_franka::GripperState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sas_robot_driver_franka::GripperState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sas_robot_driver_franka::GripperState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sas_robot_driver_franka::GripperState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sas_robot_driver_franka::GripperState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "53f8669159aaded70b1783087f07679d";
  }

  static const char* value(const ::sas_robot_driver_franka::GripperState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x53f8669159aaded7ULL;
  static const uint64_t static_value2 = 0x0b1783087f07679dULL;
};

template<class ContainerAllocator>
struct DataType< ::sas_robot_driver_franka::GripperState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sas_robot_driver_franka/GripperState";
  }

  static const char* value(const ::sas_robot_driver_franka::GripperState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sas_robot_driver_franka::GripperState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 width\n"
"float32 max_width\n"
"bool is_grasped\n"
"uint16 temperature\n"
"uint64 duration_ms\n"
;
  }

  static const char* value(const ::sas_robot_driver_franka::GripperState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sas_robot_driver_franka::GripperState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.width);
      stream.next(m.max_width);
      stream.next(m.is_grasped);
      stream.next(m.temperature);
      stream.next(m.duration_ms);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GripperState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sas_robot_driver_franka::GripperState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sas_robot_driver_franka::GripperState_<ContainerAllocator>& v)
  {
    s << indent << "width: ";
    Printer<float>::stream(s, indent + "  ", v.width);
    s << indent << "max_width: ";
    Printer<float>::stream(s, indent + "  ", v.max_width);
    s << indent << "is_grasped: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_grasped);
    s << indent << "temperature: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.temperature);
    s << indent << "duration_ms: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.duration_ms);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SAS_ROBOT_DRIVER_FRANKA_MESSAGE_GRIPPERSTATE_H
