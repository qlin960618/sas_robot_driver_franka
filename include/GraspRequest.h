// Generated by gencpp from file sas_robot_driver_franka/GraspRequest.msg
// DO NOT EDIT!


#ifndef SAS_ROBOT_DRIVER_FRANKA_MESSAGE_GRASPREQUEST_H
#define SAS_ROBOT_DRIVER_FRANKA_MESSAGE_GRASPREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace sas_robot_driver_franka
{
template <class ContainerAllocator>
struct GraspRequest_
{
  typedef GraspRequest_<ContainerAllocator> Type;

  GraspRequest_()
    : width(0.0)
    , speed(0.0)
    , force(0.0)
    , epsilon_inner(0.0)
    , epsilon_outer(0.0)  {
    }
  GraspRequest_(const ContainerAllocator& _alloc)
    : width(0.0)
    , speed(0.0)
    , force(0.0)
    , epsilon_inner(0.0)
    , epsilon_outer(0.0)  {
  (void)_alloc;
    }



   typedef float _width_type;
  _width_type width;

   typedef float _speed_type;
  _speed_type speed;

   typedef float _force_type;
  _force_type force;

   typedef float _epsilon_inner_type;
  _epsilon_inner_type epsilon_inner;

   typedef float _epsilon_outer_type;
  _epsilon_outer_type epsilon_outer;





  typedef boost::shared_ptr< ::sas_robot_driver_franka::GraspRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sas_robot_driver_franka::GraspRequest_<ContainerAllocator> const> ConstPtr;

}; // struct GraspRequest_

typedef ::sas_robot_driver_franka::GraspRequest_<std::allocator<void> > GraspRequest;

typedef boost::shared_ptr< ::sas_robot_driver_franka::GraspRequest > GraspRequestPtr;
typedef boost::shared_ptr< ::sas_robot_driver_franka::GraspRequest const> GraspRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sas_robot_driver_franka::GraspRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sas_robot_driver_franka::GraspRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::sas_robot_driver_franka::GraspRequest_<ContainerAllocator1> & lhs, const ::sas_robot_driver_franka::GraspRequest_<ContainerAllocator2> & rhs)
{
  return lhs.width == rhs.width &&
    lhs.speed == rhs.speed &&
    lhs.force == rhs.force &&
    lhs.epsilon_inner == rhs.epsilon_inner &&
    lhs.epsilon_outer == rhs.epsilon_outer;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::sas_robot_driver_franka::GraspRequest_<ContainerAllocator1> & lhs, const ::sas_robot_driver_franka::GraspRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace sas_robot_driver_franka

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::sas_robot_driver_franka::GraspRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sas_robot_driver_franka::GraspRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sas_robot_driver_franka::GraspRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sas_robot_driver_franka::GraspRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sas_robot_driver_franka::GraspRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sas_robot_driver_franka::GraspRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sas_robot_driver_franka::GraspRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "337f46ba15e58c568d47e27881cf893c";
  }

  static const char* value(const ::sas_robot_driver_franka::GraspRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x337f46ba15e58c56ULL;
  static const uint64_t static_value2 = 0x8d47e27881cf893cULL;
};

template<class ContainerAllocator>
struct DataType< ::sas_robot_driver_franka::GraspRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sas_robot_driver_franka/GraspRequest";
  }

  static const char* value(const ::sas_robot_driver_franka::GraspRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sas_robot_driver_franka::GraspRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 width\n"
"float32 speed\n"
"float32 force\n"
"float32 epsilon_inner\n"
"float32 epsilon_outer\n"
;
  }

  static const char* value(const ::sas_robot_driver_franka::GraspRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sas_robot_driver_franka::GraspRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.width);
      stream.next(m.speed);
      stream.next(m.force);
      stream.next(m.epsilon_inner);
      stream.next(m.epsilon_outer);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GraspRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sas_robot_driver_franka::GraspRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sas_robot_driver_franka::GraspRequest_<ContainerAllocator>& v)
  {
    s << indent << "width: ";
    Printer<float>::stream(s, indent + "  ", v.width);
    s << indent << "speed: ";
    Printer<float>::stream(s, indent + "  ", v.speed);
    s << indent << "force: ";
    Printer<float>::stream(s, indent + "  ", v.force);
    s << indent << "epsilon_inner: ";
    Printer<float>::stream(s, indent + "  ", v.epsilon_inner);
    s << indent << "epsilon_outer: ";
    Printer<float>::stream(s, indent + "  ", v.epsilon_outer);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SAS_ROBOT_DRIVER_FRANKA_MESSAGE_GRASPREQUEST_H
